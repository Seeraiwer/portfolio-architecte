// D√©finition de l'URL de base de l'API
const api = "http://localhost:5678/api/";

// R√©cup√©ration du token utilisateur depuis le localStorage
const token = localStorage.getItem("token");

// Variables globales
let categoryIdValue = ""; // Stocke l'ID de la cat√©gorie s√©lectionn√©e pour le filtrage
let categories = []; // Stocke la liste des cat√©gories r√©cup√©r√©es depuis l'API
let btnTitle = []; // Stocke les titres des boutons de filtrage

// S√©lection des √©l√©ments du DOM
const btnSort = document.querySelectorAll(".btn"); // Tous les boutons de filtrage
const filterButtons = document.createElement("div"); // Conteneur des boutons de filtre
const portfolioSection = document.querySelector("#portfolio"); // Section du portfolio

// Ins√®re le conteneur des boutons juste apr√®s le titre "Mes Projets"
portfolioSection
  .querySelector("h2")
  .insertAdjacentElement("afterend", filterButtons);

const imageUrls = []; // Stocke les URLs des images des projets

// =============================================
// R√âCUP√âRATION DES DONN√âES DE L'API
// =============================================

/**
 * R√©cup√®re la liste des projets depuis l'API et met √† jour l'affichage.
 */
async function fetchApiWorks() {
  try {
    const response = await fetch(api + "works"); // Appel API pour r√©cup√©rer les projets
    const data = await response.json(); // Conversion en JSON
    cards = data; // Stockage des projets

    const btnTitle = getButtonTitles(cards); // R√©cup√©ration des titres uniques des cat√©gories
    console.log(`Titres des boutons filtres : ${btnTitle.join(" / ")}`);
    console.log(cards);

    filtersBtn(btnTitle); // G√©n√©ration des boutons de filtre
    workDisplay(cards); // Affichage des projets dans la galerie
  } catch (error) {
    console.error("Erreur lors du chargement des projets:", error);
  }
}

/**
 * R√©cup√®re la liste des cat√©gories depuis l'API et met √† jour la variable globale `categories`.
 */
async function fetchApiCategories() {
  try {
    const response = await fetch(api + "categories"); // Appel API pour r√©cup√©rer les cat√©gories
    categories = await response.json(); // Conversion en JSON et stockage
    console.log(categories);
  } catch (error) {
    console.error("Erreur lors du chargement des cat√©gories:", error);
  }
}

// =============================================
// TRAITEMENT DES DONN√âES
// =============================================

/**
 * Extrait les titres de cat√©gories uniques √† partir de la liste des projets.
 * @param {Array} cards - Tableau des projets r√©cup√©r√©s depuis l'API.
 * @returns {Array} - Tableau des noms de cat√©gories uniques.
 */
function getButtonTitles(cards) {
  return [...new Set(cards.map((card) => card.category.name))]; // Retourne une liste unique des cat√©gories
}

// =============================================
// CR√âATION & INJECTION DES BOUTONS DE FILTRAGE
// =============================================

/**
 * G√©n√®re les boutons de filtrage et les ins√®re dans le DOM.
 * @param {Array} btnTitle - Liste des cat√©gories uniques pour g√©n√©rer les boutons.
 */
function filtersBtn(btnTitle) {
  // Cr√©ation du bouton "Tous" pour afficher tous les projets
  const allButton = document.createElement("button"); // Cr√©e un √©l√©ment <button>
  allButton.classList.add("btn", "active"); // Ajoute les classes "btn" et "active" (ce bouton est s√©lectionn√© par d√©faut)
  allButton.textContent = "Tous"; // D√©finit le texte du bouton comme "Tous"
  filterButtons.appendChild(allButton); // Ajoute le bouton au conteneur des filtres
  filterButtons.classList.add("filter"); // Ajoute une classe "filter" au conteneur pour le styliser

  // Cr√©ation des boutons dynamiques pour chaque cat√©gorie re√ßue en param√®tre
  const buttons = [
    allButton, // Le bouton "Tous" est inclus en premier dans la liste des boutons
    ...btnTitle.map((categoryName) => {
      // Parcourt le tableau `btnTitle` contenant les noms des cat√©gories
      const button = document.createElement("button"); // Cr√©e un bouton pour chaque cat√©gorie
      button.classList.add("btn"); // Ajoute la classe "btn" pour le style
      button.textContent = categoryName; // D√©finit le texte du bouton comme le nom de la cat√©gorie
      filterButtons.appendChild(button); // Ajoute le bouton au conteneur des filtres
      return button; // Retourne le bouton cr√©√© pour qu'il soit ajout√© au tableau `buttons`
    }),
  ];

  // Gestion des √©v√©nements de clic sur chaque bouton de filtrage
  buttons.forEach((btn) => {
    btn.addEventListener("click", (e) => {
      categoryIdValue = e.target.textContent; // Stocke le texte du bouton cliqu√© (nom de la cat√©gorie s√©lectionn√©e)
      console.log(categoryIdValue); // Affiche la cat√©gorie s√©lectionn√©e dans la console (utile pour le d√©bogage)

      // Supprime la classe "active" de tous les boutons pour d√©sactiver l'ancien filtre
      buttons.forEach((btn) => btn.classList.remove("active"));

      // Ajoute la classe "active" au bouton qui vient d'√™tre cliqu√©
      e.target.classList.add("active");

      workDisplay(); // Met √† jour l'affichage des projets en fonction du filtre s√©lectionn√©
    });
  });
}

// =============================================
// G√âN√âRATION DES CARTES DE PROJETS
// =============================================

/**
 * G√©n√®re un √©l√©ment de projet sous forme de carte et l'ajoute au DOM.
 * @param {Object} card - Objet contenant les informations du projet.
 * @returns {HTMLElement} - √âl√©ment figure repr√©sentant le projet.
 */
function cardsTemplate(card) {
  // Cr√©ation d'un √©l√©ment <figure> qui servira de conteneur pour la carte
  const cardDisplay = document.createElement("figure");

  // Ajout d'un identifiant unique pour chaque carte (utile pour les interactions dynamiques)
  cardDisplay.setAttribute("data-card-id", card.id);
  cardDisplay.setAttribute("data-category-id", card.categoryId);

  // Cr√©ation de l'image du projet
  const imgCard = document.createElement("img");
  imgCard.setAttribute("src", card.imageUrl); // D√©finit la source de l'image
  imgCard.setAttribute("alt", "photo de " + card.title); // Texte alternatif pour l'accessibilit√© et le SEO

  // Cr√©ation du titre du projet sous forme de l√©gende (<figcaption>)
  const titleCard = document.createElement("figcaption");
  titleCard.textContent = card.title; // Ajoute le titre du projet

  // Ajout de l'image et du titre √† l'√©l√©ment <figure>
  cardDisplay.appendChild(imgCard);
  cardDisplay.appendChild(titleCard);

  // Retourne la carte cr√©√©e (peut √™tre utilis√© pour d'autres manipulations si n√©cessaire)
  return cardDisplay;
}
// Fonction pour ajouter plusieurs cartes en une seule op√©ration DOM
function displayCards(cardsArray) {
  const fragment = document.createDocumentFragment(); // Cr√©e un fragment DOM pour optimiser l'ajout

  cardsArray.forEach((card) => {
    const cardElement = cardsTemplate(card); // G√©n√®re une carte
    fragment.appendChild(cardElement); // Ajoute la carte au fragment
  });

  portfolioSection.appendChild(fragment); // Ajoute toutes les cartes en une seule op√©ration DOM
}

// =============================================
// AFFICHAGE DES PROJETS FILTR√âS
// =============================================

function workDisplay() {
  const gallery = document.querySelector(".gallery"); // S√©lectionne l'√©l√©ment contenant la galerie
  const cardDisplay = new Set(); // Utilisation d'un Set pour √©viter les doublons
  gallery.innerHTML = ""; // Vide la galerie avant d'ajouter les nouvelles cartes filtr√©es

  // üîç Filtrage des projets en fonction de la cat√©gorie s√©lectionn√©e
  cards.forEach((card) => {
    if (categoryIdValue === "Tous" || card.category.name === categoryIdValue) {
      cardDisplay.add(card); // Ajoute le projet au Set si la cat√©gorie correspond
    }
  });

  // üñºÔ∏è Ajout des projets filtr√©s √† la galerie
  cardDisplay.forEach((card) => {
    gallery.appendChild(cardsTemplate(card)); // G√©n√®re la carte et l'ajoute √† la galerie
  });
}

// =============================================
// CHARGEMENT DES DONN√âES AU D√âMARRAGE
// =============================================

window.addEventListener("load", () => {
  fetchApiWorks(); // üîÑ R√©cup√®re les projets depuis l'API
  fetchApiCategories(); // üìÇ R√©cup√®re les cat√©gories depuis l'API
  categoryIdValue = "Tous"; // üè∑Ô∏è D√©finit la cat√©gorie par d√©faut sur "Tous"
  checkToken(); // üîí V√©rifie si l'utilisateur est connect√© pour g√©rer l'affichage
});
